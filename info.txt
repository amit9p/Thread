import pytest
from unittest.mock import Mock
from qlik_tools.adapters import Adapter
from qlik_task import notify_Qlik

def test_notify_Qlik(mocker):
    # Mock the Adapter class
    mock_adapter = Mock(spec=Adapter)
    mock_response = Mock()
    
    # Set the necessary attributes on the mock adapter
    mock_adapter.base_url = "https://mock-base-url.com"
    mock_adapter.xrf_key = "mockXrfKey"

    # Mock the post method of the Adapter class
    mocker.patch.object(mock_adapter, 'post', return_value=mock_response)

    # Define the test data
    test_payload = {"key": "value"}
    test_api_endpoint = "test_endpoint"
    
    # Call the notify_Qlik function with the mock adapter and test data
    response = notify_Qlik(adapter=mock_adapter, payload=test_payload, api_endpoint=test_api_endpoint)

    # Construct the expected URL
    expected_url = f"{mock_adapter.base_url}/{test_api_endpoint}?Xrfkey={mock_adapter.xrf_key}"

    # Assertions to verify correct behavior
    mock_adapter.post.assert_called_once_with(url=expected_url, json=test_payload)
    assert response == mock_response




def notify_Qlik(adapter: Adapter, payload: dict, api_endpoint: str) -> requests.Response:
    """
    Sends a notification to a specified Qlik API endpoint with a given payload.

    Args:
        adapter (Adapter): An instance of the Adapter class to handle the request.
        payload (dict): The data to be sent as part of the notification.
        api_endpoint (str): The specific API endpoint to send the notification to.

    Returns:
        requests.Response: The response from the API call.
    """
    url = f"{adapter.base_url}/{api_endpoint}?Xrfkey={adapter.xrf_key}"
    return adapter.post(url=url, json=payload)

-------------------------------------------------------------------------------------------------
.coveragerc
[run]
omit = 
    */tests/*


