import pytest
from unittest.mock import Mock
from qlik_tools.adapters import Adapter
from qlik_task import notify_Qlik

def test_notify_Qlik(mocker):
    # Mock the Adapter class
    mock_adapter = Mock(spec=Adapter)
    mock_response = Mock()
    
    # Set the necessary attributes on the mock adapter
    mock_adapter.base_url = "https://mock-base-url.com"
    mock_adapter.xrf_key = "mockXrfKey"

    # Mock the post method of the Adapter class
    mocker.patch.object(mock_adapter, 'post', return_value=mock_response)

    # Define the test data
    test_payload = {"key": "value"}
    test_api_endpoint = "test_endpoint"
    
    # Call the notify_Qlik function with the mock adapter and test data
    response = notify_Qlik(adapter=mock_adapter, payload=test_payload, api_endpoint=test_api_endpoint)

    # Construct the expected URL
    expected_url = f"{mock_adapter.base_url}/{test_api_endpoint}?Xrfkey={mock_adapter.xrf_key}"

    # Assertions to verify correct behavior
    mock_adapter.post.assert_called_once_with(url=expected_url, json=test_payload)
    assert response == mock_response




def notify_Qlik(adapter: Adapter, payload: dict, api_endpoint: str) -> requests.Response:
    """
    Sends a notification to a specified Qlik API endpoint with a given payload.

    Args:
        adapter (Adapter): An instance of the Adapter class to handle the request.
        payload (dict): The data to be sent as part of the notification.
        api_endpoint (str): The specific API endpoint to send the notification to.

    Returns:
        requests.Response: The response from the API call.
    """
    url = f"{adapter.base_url}/{api_endpoint}?Xrfkey={adapter.xrf_key}"
    return adapter.post(url=url, json=payload)

-------------------------------------------------------------------------------------------------
.coveragerc
[run]
omit = 
    */tests/*

pytest --cov=qlik_tools --cov-report html --cov-config=.coveragerc

-------------------------------------------------------------------------------------------------------


Title
"Integration and Testing of notify_Qlik Function in Qlik Tools Module"
Introduction
Brief overview of the purpose of the notify_Qlik function.
Importance of the function in the context of your Qlik Sense integration.
Function Implementation
Objective: Explain what notify_Qlik does.
Parameters: Describe the parameters (adapter, payload, API endpoint) and their significance.
Process Flow: Outline the steps the function takes internally (e.g., URL construction, making POST request).
Code Snippet
Include a code snippet of the notify_Qlik function.
Optionally, add inline comments for clarity.
Unit Testing
Purpose of Testing: Emphasize the importance of unit testing for reliability and maintainability.
Testing Framework: Mention the use of pytest and pytest-mock.
Mocking Strategy: Explain why mocking is used (e.g., to isolate the function, avoid network calls).
Test Case Description
Test Objective: What the test is designed to check.
Mock Setup: How the mocks are configured (setting base_url and xrf_key).
Test Execution: Steps the test performs.
Assertions: What assertions are made and why.
Code Snippet of Test
Include the code snippet of the test case.
Add comments to explain critical parts of the test code.
Troubleshooting Common Issues
Describe issues like the AttributeError you encountered.
Provide solutions or workarounds for these issues.
Best Practices
Coding standards used in the function and test (e.g., PEP 8 for Python).
Tips for writing effective tests (e.g., aim for readability, maintainability).
Additional Resources
Links to relevant documentation (e.g., Qlik Sense API, pytest documentation).
Any other resources that might be helpful for understanding or extending the work.
Conclusion
Recap the functionality and importance of the notify_Qlik function and its tests.
Encourage feedback and suggestions for improvement.
Visuals (Optional)
Include flowcharts or diagrams if they aid in understanding.
Screenshots of test execution results or relevant parts of the code.
FAQs (Optional)
Address common questions or concerns regarding the function or its testing.
Remember to format the document with headings, bullet points, and code blocks for readability. Confluence also allows you to add labels for easy categorization and searchability within your organization.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

def test_start_task(mocker):
    # Mock the Adapter and its post method
    mock_adapter = Mock(spec=Adapter)
    mock_adapter.base_url = "https://mock-base-url.com"
    mock_adapter.xrf_key = "mockXrfKey"
    mocker.patch.object(mock_adapter, 'post')

    # Test data
    test_task_id = "123"

    # Call the start function
    start(adapter=mock_adapter, task_id=test_task_id)

    # Construct the expected URL
    expected_url = f"{mock_adapter.base_url}/qrs/task/{test_task_id}/start/synchronous?Xrfkey={mock_adapter.xrf_key}"

    # Assertion
    mock_adapter.post.assert_called_once_with(url=expected_url)


def test_list_all_tasks(mocker):
    # Mock the Adapter and its get method
    mock_adapter = Mock(spec=Adapter)
    mock_adapter.base_url = "https://mock-base-url.com"
    mock_adapter.xrf_key = "mockXrfKey"
    mocker.patch.object(mock_adapter, 'get', return_value=Mock(status_code=200, text='[]'))

    # Call the list_all function
    response = list_all(adapter=mock_adapter)

    # Construct the expected URL
    expected_url = f"{mock_adapter.base_url}/task?Xrfkey={mock_adapter.xrf_key}"

    # Assertions
    assert response.status_code == 200
    mock_adapter.get.assert_called_once_with(url=expected_url)


def test_get_task(mocker):
    # Mock the Adapter and its get method
    mock_adapter = Mock(spec=Adapter)
    mock_adapter.base_url = "https://mock-base-url.com"
    mock_adapter.xrf_key = "mockXrfKey"
    test_tasks = json.dumps([{"id": "123", "name": "Test Task"}])
    mocker.patch.object(mock_adapter, 'get', return_value=Mock(status_code=200, text=test_tasks))

    # Test data
    test_task_id = "123"

    # Call the get function
    task = get(adapter=mock_adapter, task_id=test_task_id)

    # Assertions
    assert task['id'] == test_task_id
    assert task['name'] == "Test Task"


